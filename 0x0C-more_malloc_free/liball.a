!<arch>
//                                              40        `
0-malloc_checked.c/
1-string_nconcat.c/
0.main.c/       0           0     0     644     573       `
#include "main.h"
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char *c;
    int *i;
    float *f;
    double *d;

    c = malloc_checked(sizeof(char) * 1024);
    printf("%p\n", (void *)c);
    i = malloc_checked(sizeof(int) * 402);
    printf("%p\n", (void *)i);
    f = malloc_checked(sizeof(float) * 100000000);
    printf("%p\n", (void *)f);
    d = malloc_checked(INT_MAX);
    printf("%p\n", (void *)d);
    free(c);
    free(i);
    free(f);
    free(d);
    return (0);
}

/0              0           0     0     644     218       `
#include "main.h"
/**
 *malloc_checked - array for prints a string
 *@b: number of memory
 *Return: void
 */

void *malloc_checked(unsigned int b)
{
void *p;

p = malloc(b);
if (p == NULL)
{
exit(98);
}

return (p);
}
100-main.c/     0           0     0     644     899       `
#include "main.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/**
 * simple_print_buffer - prints buffer in hexa
 * @buffer: the address of memory to print
 * @size: the size of the memory to print
 *
 * Return: Nothing.
 */
void simple_print_buffer(char *buffer, unsigned int size)
{
    unsigned int i;

    i = 0;
    while (i < size)
    {
        if (i % 10)
        {
            printf(" ");
        }
        if (!(i % 10) && i)
        {
            printf("\n");
        }
        printf("0x%02x", buffer[i]);
        i++;
    }
    printf("\n");
}

/**
 * main - check the code for
 *
 * Return: Always 0.
 */
int main(void)
{
    char *p;
    int i;

    p = malloc(sizeof(char) * 10);
    p = _realloc(p, sizeof(char) * 10, sizeof(char) * 98);
    i = 0;
    while (i < 98)
    {
        p[i++] = 98;
    }
    simple_print_buffer(p, 98);
    free(p);
    return (0);
}

100-realloc.c/  0           0     0     644     641       `
#include "main.h"

/**
 * _realloc -  reallocates a memory block using malloc and free
 * @ptr: pointer
 * @old_size: old size
 * @new_size: new size
 * Return: pointer
 */
void *_realloc(void *ptr, unsigned int old_size, unsigned int new_size)
{
	char *clone, *relloc;
	unsigned int i;

	if (ptr != NULL)
	clone = ptr;
	else
	{ return (malloc(new_size)); }
	if (new_size == old_size)
	return (ptr);
	if (new_size == 0 && ptr != NULL)
	{ free(ptr);
	return (0); }
	relloc = malloc(new_size);
	if (relloc == NULL)
	return (0);
	for (i = 0; i < (old_size || i < new_size); i++)
	{
		*(relloc + i) = clone[i];
	}
	free(ptr);
return (relloc);
}

101-mul.c/      0           0     0     644     3016      `
#include <stdio.h>
#include <stdlib.h>
#include "main.h"

void populateResult(char *dest, char *n1, int n1_len, char *n2, int n2_len);
int getLengthOfNum(char *str);
void print_result(char *src, int length);

/**
 * main - entry point, multiplies two numbers
 *
 * @argc: integer, length of @argv
 *
 * @argv: one-dimensional array of strings, arguments of this program
 *
 * Return: 0, success
 */

int main(int argc, char *argv[])
{
	int num1_length, num2_length;
	char *result;

	if (argc != 3)
	{
		printf("Error\n");
		exit(98);
	}

	num1_length = getLengthOfNum(argv[1]);

	if (!num1_length)
	{
		printf("Error\n");
		exit(98);
	}

	num2_length = getLengthOfNum(argv[2]);

	if (!num2_length)
	{
		printf("Error\n");
		exit(98);
	}

	result = malloc(num1_length + num2_length);

	if (!result)
		return (1);

	populateResult(result, argv[1], num1_length, argv[2], num2_length);

	print_result(result, num1_length + num2_length);
	printf("\n");
	free(result);

	return (0);
}

/**
 * getLengthOfNum - length of numbers in a string
 *
 * @str: pointer to string of numbers
 *
 * Return: integer (SUCCESS) or
 * NULL, if string includes char
 */

int getLengthOfNum(char *str)
{
	int i = 0;

	while (str[i])
	{
		if (str[i] >= '0' && str[i] <= '9')
			i++;
		else
			return ('\0');

	}

	return (i);
}

/**
 * populateResult - multiplies two numbers stored as string
 * and stores result in @dest
 *
 * @dest: pointer to where @num1 * @num2 should be stored
 *
 * @n1: positive number stored as string in an array
 *
 * @n2: positive number stored as string in an array
 *
 * @n1_len: length of @n1
 *
 * @n2_len: length of @n2
 */

void populateResult(char *dest, char *n1, int n1_len, char *n2, int n2_len)
{
	int i, j, k, temp_value, non_carry_value;
	int carry_value = 0;
	char *multiplicand, *multiplier;

	if (n1_len > n2_len)
	{
		i = n1_len - 1;
		j = n2_len - 1;
		multiplicand = n1;
		multiplier = n2;
	}
	else
	{
		i = n2_len - 1;
		j = n1_len - 1;
		multiplicand = n2;
		multiplier = n1;
	}

	while (i >= 0)
	{
		k = i;

		while (k >= 0)
		{
			temp_value = ((multiplicand[k] - '0') * (multiplier[j] - '0'));
			temp_value += carry_value;

			if (j + 1 <= n2_len - 1 && dest[k + j + 1] >= '0' && dest[k + j + 1] <= '9')
				temp_value += dest[k + j + 1] - '0';

			if (temp_value < 10)
			{
				non_carry_value = temp_value;
				carry_value = 0;
			}
			else
			{
				non_carry_value = temp_value % 10;
				carry_value = temp_value / 10;
			}

			dest[k + j + 1] = non_carry_value + '0';
			k--;
		}

		if (carry_value)
			dest[k + j + 1] = carry_value + '0';

		carry_value = 0;

		if (j > 0)
			j--;
		else
			i = -1;
	}

	free(dest);
	free(multiplicand);
	free(multiplier);
}

/**
 * print_result - prints numbers stored as string in a memory location
 *
 * @src: pointer to memory that stores numbers as strings
 *
 * @length: length of @src
 */

void print_result(char *src, int length)
{
	int i;

	for (i = 0; i < length; i++)
	{
		if (src[i] >= '0' && src[i] <= '9')
		printf("%c", src[i]);
	}
}
1-main.c/       0           0     0     644     270       `
#include "main.h"
#include <stdio.h>
#include <stdlib.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char *concat;

    concat = string_nconcat("Best ", "School !!!", 6);
    printf("%s\n", concat);
    free(concat);
    return (0);
}
/20             0           0     0     644     657       `
#include "main.h"

/**
 * string_nconcat - concatenates two strings.
 * @s1: first string
 * @s2: second string
 * @n: index
 * Return: char pointer
 */

char *string_nconcat(char *s1, char *s2, unsigned int n)
{
	char *p;
	unsigned int size1 = 0, size2 = 0, i;

	if (s1 == NULL)
		s1 = "";

	if (s2 == NULL)
		s2 = "";

	while (s1[size1] != '\0')
	{
		size1++;
	}

	while (s2[size2] != '\0')
	{
		size2++;
	}

	if (n > size2)
	n = size2;
	p = malloc((size1 + n + 1) * sizeof(char));

	if (p == NULL)
		return (0);

	for (i = 0; i < size1; i++)
	{
		p[i] = s1[i];
	}

	for (; i < (size1 + n); i++)
	{
		p[i] = s2[i - size1];
	}
	p[i] = '\0';

return (p);
}

2-calloc.c/     0           0     0     644     435       `
#include "main.h"

/**
 *_calloc -allocated memoria for nmeb elemn de zise bytes
 *@nmemb: number of element in the array
 *@size: bytes for each position in array
 *Return: pointer void
 */
void *_calloc(unsigned int nmemb, unsigned int size)
{
char *p;
unsigned int i;

if (nmemb == 0 || size == 0)
return (NULL);

p = malloc(nmemb * size);
if (p == NULL)
return (NULL);

for (i = 0; i < nmemb * size; i++)
p[i] = 0;

return (p);

}

2-main.c/       0           0     0     644     838       `
#include "main.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/**
 * simple_print_buffer - prints buffer in hexa
 * @buffer: the address of memory to print
 * @size: the size of the memory to print
 *
 * Return: Nothing.
 */
void simple_print_buffer(char *buffer, unsigned int size)
{
    unsigned int i;

    i = 0;
    while (i < size)
    {
        if (i % 10)
        {
            printf(" ");
        }
        if (!(i % 10) && i)
        {
            printf("\n");
        }
        printf("0x%02x", buffer[i]);
        i++;
    }
    printf("\n");
}

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char *a;

    a = _calloc(98, sizeof(char));
    strcpy(a, "Best");
    strcpy(a + 4, " School! :)\n");
    a[97] = '!';
    simple_print_buffer(a, 98);
    free(a);
    return (0);
}
3-array_range.c/0           0     0     644     350       `
#include "main.h"

/**
 * array_range - creates an array of integers
 * @min: minimum
 * @max: maximum
 * Return: array
 */
int *array_range(int min, int max)
{
	int *arr, i = 0, t = min;

	if (min > max)
		return (0);
	arr = malloc((max - min + 1) * sizeof(int));

	if (!arr)
		return (0);
	while (i <= max - min)
		arr[i++] = t++;
	return (arr);
}
3-main.c/       0           0     0     644     753       `
#include "main.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/**
 * simple_print_buffer - prints buffer in hexa
 * @buffer: the address of memory to print
 * @size: the size of the memory to print
 *
 * Return: Nothing.
 */
void simple_print_buffer(int *buffer, unsigned int size)
{
    unsigned int i;

    i = 0;
    while (i < size)
    {
        if (i % 10)
        {
            printf(" ");
        }
        if (!(i % 10) && i)
        {
            printf("\n");
        }
        printf("0x%02x", buffer[i]);
        i++;
    }
    printf("\n");
}

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    int *a;

    a = array_range(0, 10);
    simple_print_buffer(a, 11);
    free(a);
    return (0);
}

_putchar.c/     0           0     0     644     246       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
return (write(1, &c, 1));
}
